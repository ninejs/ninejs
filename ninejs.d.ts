// Generated by dts-bundle v0.3.0
// Dependencies for this module:
/// <reference path="typings/node/node.d.ts" />

declare module 'ninejs' {
    export import _css = require('ninejs/_css');
    export import _nineplate = require('ninejs/_nineplate');
    export import client = require('ninejs/client');
    export import config = require('ninejs/config');
    export import core = require('ninejs/core');
    export import css = require('ninejs/css');
    export import modernizer = require('ninejs/modernizer');
    export import modules = require('ninejs/modules');
    export import nineplate = require('ninejs/nineplate');
    export import request = require('ninejs/request');
    export import ui = require('ninejs/ui');
}

declare module 'ninejs/_css' {
    export import builder = require('ninejs/_css/builder');
    export import styleEnable = require('ninejs/_css/styleEnable');
}

declare module 'ninejs/_nineplate' {
    export import baseProcessor = require('ninejs/_nineplate/baseProcessor');
    export import domProcessor = require('ninejs/_nineplate/domProcessor');
    export import renderers = require('ninejs/_nineplate/renderers');
    export import textProcessor = require('ninejs/_nineplate/textProcessor');
    export import utils = require('ninejs/_nineplate/utils');
}

declare module 'ninejs/client' {
    export import hash = require('ninejs/client/hash');
    export import router = require('ninejs/client/router');
}

declare module 'ninejs/config' {
    var r: any;
    export default r;
}

declare module 'ninejs/core' {
    export import _common = require('ninejs/core/_common');
    export import array = require('ninejs/core/array');
    export import aspect = require('ninejs/core/aspect');
    export import bluebird = require('ninejs/core/bluebird');
    export import cache = require('ninejs/core/cache');
    export import deferredUtils = require('ninejs/core/deferredUtils');
    export import ext = require('ninejs/core/ext');
    export import extend = require('ninejs/core/extend');
    export import logic = require('ninejs/core/logic');
    export import objUtils = require('ninejs/core/objUtils');
    export import on = require('ninejs/core/on');
    export import text = require('ninejs/core/text');
}

declare module 'ninejs/css' {
    import * as def from 'ninejs/core/deferredUtils';
    export interface StyleType {
        enable: (parent?: any) => StyleType;
        disable: () => StyleType;
    }
    export class StyleObject implements StyleType {
        globalWindow: Window;
        children: StyleObject[];
        path: string;
        data: string;
        [name: string]: any;
        document: HTMLDocument;
        handle: StyleInstance;
        normalizeUrls(css: string): string;
        enableOldIE(styleNode: any, result: StyleInstance, parent: any, document: HTMLDocument): void;
        enable(parent?: any): StyleInstance;
        disable(): StyleInstance;
        constructor();
    }
    export class StyleInstance implements StyleType {
        styleNode: HTMLStyleElement;
        children: StyleInstance[];
        enable(): this;
        disable(): this;
    }
    export function style(processResult: StyleObject): StyleObject;
    export function loadFromString(css: string, uniqueId: string): def.PromiseType<{}>;
    export function load(id: string, require: any, load: (r: StyleObject) => void): void;
}

declare module 'ninejs/modernizer' {
    export interface ModernizerType {
        (tst: string): any;
        addTest: (feature: any, test?: any) => ModernizerType;
        add: (feature: string, test: any) => ModernizerType;
        prefixed: (prop: any, obj?: any, elem?: any) => any;
        load: () => void;
        testStyles: (rule: any, callback: any, nodes?: any, testnames?: any) => any;
        testAllProps: (prop: any, prefixed?: any, elem?: any) => any;
        _prefixes: string[];
        mq: (mq: any) => boolean;
        [name: string]: any;
    }
    var _default: ModernizerType;
    export default _default;
}

declare module 'ninejs/modules' {
    export import Module = require('ninejs/modules/Module');
    export import client = require('ninejs/modules/client');
    export import clientBoot = require('ninejs/modules/clientBoot');
    export import config = require('ninejs/modules/config');
    export import empty = require('ninejs/modules/empty');
    export import moduleDefine = require('ninejs/modules/moduleDefine');
    export import moduleRegistry = require('ninejs/modules/moduleRegistry');
    export import ninejsClient = require('ninejs/modules/ninejs-client');
    export import ninejsServer = require('ninejs/modules/ninejs-server');
    export import serverBoot = require('ninejs/modules/serverBoot');
    export import webserver = require('ninejs/modules/webserver');
}

declare module 'ninejs/nineplate' {
    import Properties from 'ninejs/core/ext/Properties';
    import * as _domProcessor from 'ninejs/_nineplate/domProcessor';
    import * as _textProcessor from 'ninejs/_nineplate/textProcessor';
    export interface ResultFunction {
        (context: any, doc?: HTMLDocument): any;
        amdDependencies?: string[];
    }
    var result: any;
    export function load(name: string, req: any, onLoad: (v: any) => void, config?: any): any;
    export default result;
    export var domProcessor: typeof _domProcessor;
    export var textProcessor: typeof _textProcessor;
    export class Template extends Properties {
        text: string;
        compiledDomVersion: (v: any) => any;
        compiledTextVersion: (v: any) => any;
        toAmd(sync: boolean, options?: any): any;
        toCommonJs(): any;
        compileDomSync(options?: any): (val: any) => any;
        compileDom(sync: boolean, options?: any): any;
        renderDom(context: any): any;
        compileTextSync(): any;
        compileText(sync: boolean): any;
        renderText(context: any): any;
    }
}

declare module 'ninejs/request' {
    export default function fn(): any;
    export function get(...args: any[]): any;
    export function post(...args: any[]): any;
    export function put(...args: any[]): any;
    export function del(...args: any[]): any;
    export function patch(...args: any[]): any;
}

declare module 'ninejs/ui' {
    export import Skin = require('ninejs/ui/Skin');
    export import Skins = require('ninejs/ui/Skins');
    export import Widget = require('ninejs/ui/Widget');
    export import bootstrap = require('ninejs/ui/bootstrap');
    export import utils = require('ninejs/ui/utils');
}

declare module 'ninejs/_css/builder' {
    export interface AMDPrefixesType {
        name: string;
        location: string;
    }
    export interface ProcessedCssType {
        path: string;
        data: string;
        children: ProcessedCssType[];
    }
    export interface ProcessCssOptionsType {
        path?: string;
        parentPath?: string;
        toBase64?: boolean;
        [name: string]: any;
    }
    export interface ProcessCssImportType {
        children: ProcessedCssType[];
        css: string;
    }
    export function processCss(data: string, path: string, realPath: string, prefixes: AMDPrefixesType[], baseUrl: string, options: ProcessCssOptionsType, callback: (t: ProcessedCssType) => void): void;
}

declare module 'ninejs/_css/styleEnable' {
    export function load(...args: any[]): any;
}

declare module 'ninejs/_nineplate/baseProcessor' {
    import { InternalNode } from 'ninejs/_nineplate/utils/node/xmlParser';
    export class XmlNode {
        node: InternalNode;
        nodeType(): number;
        value(): any;
        nodeValue(): any;
        getAttributes(): XmlNode[];
        getChildNodes(): XmlNode[];
        hasVariableTagName(): boolean;
        getVariableTagName(callback: (v: string) => void): void;
        nodeName(): string;
        nodeLocalName(): string;
        namespaceUri(): string;
        parentNode(): XmlNode;
        set(n: string, v: any): void;
        get(n: string): any;
        constructor(parsedXmlNode: InternalNode);
    }
    export class TextParseContext {
        r: string[];
        lineBuffer: string[];
        ignoreComments: boolean;
        append(line: string): void;
        appendLine(): void;
        getText(): string;
        constructor();
    }
    export function trim(content: any): string;
    export function safeFilter(content: string): string;
    export function getParsedXml(text: string, sync: boolean): any;
    export interface ExpressionToken {
        content: any;
        contentType: string;
        type: string;
        identifier: string;
        value: any;
        modifier: string;
        optimized: string[];
        arguments: ExpressionToken[];
    }
    export interface ParserType {
        parse: (content: string) => ExpressionToken;
    }
    export { InternalNode } from 'ninejs/_nineplate/utils/node/xmlParser';
}

declare module 'ninejs/_nineplate/domProcessor' {
    export function compileDom(template: string, sync: boolean, options: any): any;
}

declare module 'ninejs/_nineplate/renderers' {
    export import JavascriptRenderer = require('ninejs/_nineplate/renderers/JavascriptRenderer');
}

declare module 'ninejs/_nineplate/textProcessor' {
    export function compileText(template: string, sync: boolean): any;
}

declare module 'ninejs/_nineplate/utils' {
    export import functions = require('ninejs/_nineplate/utils/functions');
    export import node = require('ninejs/_nineplate/utils/node');
}

declare module 'ninejs/client/hash' {
    export default function hash(newHash?: string, replace?: boolean): string;
}

declare module 'ninejs/client/router' {
    import { PromiseType } from 'ninejs/core/deferredUtils';
    import Properties from 'ninejs/core/ext/Properties';
    export interface RouteOptions {
        action: (evt: any) => void;
        route: string;
    }
    export interface RouterBase {
        addRoute: (route: Route) => Route;
        removeRoute: (route: Route) => any;
        initAction: (evt: any) => any;
        loadAction: (args: any, evt: any) => any;
        get: (name: string) => any;
    }
    export class Router extends Properties implements RouterBase {
        initAction: (evt: any) => any;
        loadAction: (args: any, evt: any) => any;
        on(type: string, listener: (e?: any) => any): any;
        emit(...arglist: any[]): any;
        register(route: any, action?: (evt: any) => void): Route;
        go(route: string, replace: boolean): void;
        addRoute(route: Route): Route;
        removeRoute(route: Route): any;
        destroy(): void;
        dispatchRoute(evt: any): PromiseType<void>;
        hashHandler: {
            remove: () => void;
        };
        routes: Route[];
        startup(): void;
        constructor();
    }
    export class Route extends Properties implements RouterBase {
        parentRouter: RouterBase;
        route: string;
        title: string;
        emitArguments: any;
        remove(): any;
        addRoute(): any;
        removeRoute(): any;
        register(): Route;
        titleGetter(): any;
        execute(args: any, evt: any): PromiseType<any>;
        action: (evt: any) => void;
        loadAction: (args: any, evt: any) => any;
        initAction(): any;
        routeRegex: RegExp;
        parameterNames: string[];
        constructor(options: RouteOptions, router: RouterBase);
    }
    export { PromiseType };
    export function on(type: string, listener: (e?: any) => any): any;
    export function emit(...arglist: any[]): any;
    export function register(route: any, action?: (evt: any) => void): Route;
    export function go(route: string, replace?: boolean): void;
    export function addRoute(route: Route): Route;
    export function removeRoute(route: Route): any;
    export function startup(): void;
}

declare module 'ninejs/core/_common' {
    export interface DecoratorFunction {
        (fn: Function): any;
        $$ninejsType: string;
        method: Function;
    }
    export interface Extendable {
        (fn: Function): any;
        extend: (...rest: any[]) => any;
    }
    export interface Extend {
        (...rest: any[]): {
            new (...rest: any[]): any;
        };
        registerDecorator: (name: string, dec: (original: Function, current: Function) => any) => void;
        after: Function;
        before: Function;
        around: Function;
        isArray: (obj: any) => boolean;
        mixin: (obj: any, target: any) => void;
        mixinRecursive: (obj: any, target: any) => void;
        postConstruct: (construct: Function) => any;
        decorators: {
            [decoratorName: string]: {
                (fn: Function): any;
                $$ninejsType: string;
                method: Function;
            };
        };
    }
}

declare module 'ninejs/core/array' {
    export interface ArrayLike {
        length: number;
        [name: string]: any;
    }
    var map: (arr: any, callback: (src: any, idx?: number, arr?: ArrayLike) => any) => any[];
    var forEach: (arr: any, callback: (src: any, idx?: number, arr?: ArrayLike) => void) => void;
    var indexOf: (arr: any, obj: any) => number;
    var filter: (arr: any, callback: (src: any) => boolean, self?: any) => any[];
    export { map, forEach, indexOf, filter };
}

declare module 'ninejs/core/aspect' {
    export interface AdviserType {
        advice: (target: any, args: any) => any;
        next?: AdviserType;
        previous?: AdviserType;
        receiveArguments?: any;
        id?: number;
    }
    export interface SignalType {
        remove: () => void;
        advice: (target: any, ...args: any[]) => any;
        previous?: AdviserType;
        next?: AdviserType;
        [name: string]: any;
    }
    export interface DispatcherType {
        (...args: any[]): any;
        [name: string]: AdviserType;
        around?: AdviserType;
        before?: AdviserType;
        after?: AdviserType;
        target?: any;
    }
    export var after: (target: any, methodName: string, advice: (...args: any[]) => any, receiveArguments: any) => any;
    export var before: (target: any, methodName: string, advice: (...args: any[]) => any, receiveArguments: any) => any;
    export var around: (target: any, methodName: string, advice: (...args: any[]) => any, receiveArguments: any) => any;
}

declare module 'ninejs/core/bluebird' {
    import { PromiseManagerType, PromiseConstructorType } from 'ninejs/core/deferredUtils';
    var bluebird: PromiseManagerType;
    var defer: <T>(v?: T) => PromiseConstructorType<T>;
    export { defer };
    export default bluebird;
}

declare module 'ninejs/core/cache' {
    var cache: {
        (module: any, url: string, value: any): any;
        strip: (text: string) => string;
        data: {
            [name: string]: any;
        };
        getText: (url: string, sync: boolean, load: (data: any) => void) => void;
    };
    export default cache;
}

declare module 'ninejs/core/deferredUtils' {
    export interface PromiseType<T> {
        then<U>(resolve: (v: T) => U | PromiseType<U>, onrejected?: (reason: any) => any): PromiseType<U>;
        catch(onrejected?: (reason: any) => any): Promise<T>;
        fin(act: () => void): PromiseType<T>;
    }
    export interface PromiseConstructorType<T> {
        promise: PromiseType<T>;
        resolve: (v: T | PromiseType<T>) => T;
        reject: (e: Error) => void;
    }
    export interface PromiseManagerType {
        when: <T, U>(v: T | PromiseType<T>, success: (v?: T) => U | PromiseType<U>, reject?: (e?: Error) => void, fin?: () => void) => PromiseType<U>;
        defer: <T>(v?: T) => PromiseConstructorType<T>;
        all: (arr: any[]) => PromiseType<any[]>;
        delay: (ms: number) => PromiseType<any>;
    }
    export function isPromise<T>(valueOrPromise: any): valueOrPromise is PromiseType<T>;
    export var delay: (ms: number) => PromiseType<any>;
    export var mapToPromises: (arr: any[]) => PromiseType<any>[];
    export var defer: <T>(v?: T) => PromiseConstructorType<T>;
    export var when: <T, U>(v: T | PromiseType<T>, success: (v?: T) => U | PromiseType<U>, reject?: (e?: Error) => void, fin?: () => void) => PromiseType<U>;
    export var all: (arr: any[]) => PromiseType<any[]>;
    export var series: (taskList: any[]) => PromiseType<any>;
    export function resolve<T>(val: T): PromiseType<T>;
    export function ncall<T>(fn: (...args: any[]) => any, self: any, ...args: any[]): PromiseType<T>;
    export function nfcall<T>(fn: (...args: any[]) => any, ...args: any[]): PromiseType<T>;
}

declare module 'ninejs/core/ext' {
    export import Evented = require('ninejs/core/ext/Evented');
    export import Properties = require('ninejs/core/ext/Properties');
    export import _common = require('ninejs/core/ext/_common');
}

declare module 'ninejs/core/extend' {
    import { Extend } from 'ninejs/core/_common';
    function isArray(obj: any): boolean;
    function mixin(obj: any, target: any): void;
    function mixinRecursive(obj: any, target: any): void;
    var extend: Extend;
    var after: Function, before: Function, around: Function;
    export { after, before, around, isArray, mixin, mixinRecursive };
    export default extend;
}

declare module 'ninejs/core/logic' {
    export import Expression = require('ninejs/core/logic/Expression');
}

declare module 'ninejs/core/objUtils' {
    export function deepToString(obj: any): string;
    export function protoClone(obj: any): any;
    export function isFunction(f: any): boolean;
    export function isString(obj: any): boolean;
    export function isArray(obj: any): boolean;
    export function isArrayLike(value: any): any;
    export function isNumber(n: any): boolean;
    export function isDate(date: any): boolean;
    export function isHTMLElement(v: any): v is HTMLElement;
}

declare module 'ninejs/core/on' {
    export interface RemovableType {
        remove: () => any;
    }
    export class EventHandler implements RemovableType {
        owner: any;
        action: (e?: any) => any;
        bubbles: boolean;
        cancelled: boolean;
        stopPropagation: () => void;
        remove: () => any;
        constructor(owner: any, collection: EventHandler[], action: (e?: any) => any);
    }
    export interface PausableResult extends RemovableType {
        pause: () => void;
        resume: () => void;
    }
    var on: {
        (target: any, type: string, listener: (e: any) => any, dontFix?: boolean): RemovableType;
        pausable: (target: any, type: string, listener: (e: any) => any, dontFix?: boolean) => PausableResult;
        once: (target: any, type: string, listener: (e: any) => any, dontFix?: boolean) => RemovableType;
        parse: (target: any, type: any, listener: (e: any) => any, addListener?: any, dontFix?: boolean, matchesTarget?: any) => RemovableType;
        selector: (selector: string, eventType: string, children?: boolean) => (target: any, listener: (e?: any) => any) => RemovableType;
        emit: (target: any, type: string, event: any) => any;
        _fixEvent: (evt: any, sender: any) => any;
        _preventDefault: () => void;
    };
    export var emit: (target: any, type: string, event: any) => any;
    export var pausable: (target: any, type: string, listener: (e: any) => any, dontFix?: boolean) => PausableResult;
    export var once: (target: any, type: string, listener: (e: any) => any, dontFix?: boolean) => RemovableType;
    export default on;
}

declare module 'ninejs/core/text' {
    export var dynamic: boolean;
    export function normalize(id: string, toAbsMid: (url: string) => string): string;
    export function load(id: string, require: any, load: (data: any) => void, config: any): void;
}

declare module 'ninejs/modules/Module' {
    import Properties from 'ninejs/core/ext/Properties';
    import { PromiseType } from 'ninejs/core/deferredUtils';
    class Module extends Properties {
        config: {
            [name: string]: any;
        };
        consumes: any[];
        provides: any[];
        getModuleDefinition: (name: string) => any;
        getUnit: (name: string) => any;
        on(type: string, listener: (e?: any) => any): any;
        emit(type: string, data: any): any;
        getProvides(name: string, ...args: any[]): any;
        getFeature(id: string, name: string): any;
        init(name: string, config: any): any;
        consumesModule(name: string): boolean;
        providesModule(name: string): boolean;
        enable(config: any): PromiseType<any>;
        constructor(args?: any);
    }
    export default Module;
}

declare module 'ninejs/modules/client' {
    export import FullScreenFrame = require('ninejs/modules/client/FullScreenFrame');
    export import Skin = require('ninejs/modules/client/Skin');
    export import container = require('ninejs/modules/client/container');
    export import router = require('ninejs/modules/client/router');
    export import singlePageContainer = require('ninejs/modules/client/singlePageContainer');
}

declare module 'ninejs/modules/clientBoot' {
    import { PromiseType } from 'ninejs/core/deferredUtils';
    export { PromiseType };
    var _default: PromiseType<{}>;
    export default _default;
}

declare module 'ninejs/modules/config' {
    var config: any;
    export default config;
}

declare module 'ninejs/modules/empty' {
    var _default: any;
    export default _default;
}

declare module 'ninejs/modules/moduleDefine' {
    import Module from 'ninejs/modules/Module';
    export function define(consumes: any[], callback: (unitDefine: (item: any, provide: (...args: any[]) => any) => void) => void): Module;
}

declare module 'ninejs/modules/moduleRegistry' {
    import Properties from 'ninejs/core/ext/Properties';
    import { PromiseType } from 'ninejs/core/deferredUtils';
    export class ModuleRegistry extends Properties {
        addModule: (m: any) => void;
        build: () => PromiseType<any>;
        enableModules: () => PromiseType<any>;
        enabledUnits: {
            [name: string]: any;
        };
        initUnit: (unitId: string) => PromiseType<any>;
        providesList: {
            [name: string]: any;
        };
        validate: (m: any, enableOnDemand: boolean) => PromiseType<string>;
        Module: any;
        hasProvide(id: string): boolean;
        constructor();
    }
    export var moduleRegistry: ModuleRegistry;
}

declare module 'ninejs/modules/ninejs-client' {
    import Module from 'ninejs/modules/Module';
    var _default: Module;
    export default _default;
}

declare module 'ninejs/modules/ninejs-server' {
    import Module from 'ninejs/modules/Module';
    export class NineJs extends Module {
        logger: {
            [name: string]: Logger;
        };
        config: any;
        configGetter(): any;
        loggerGetter(name: string): Logger;
        init(name: string, config: any): void;
        constructor(args: any);
    }
    var result: Module;
    export default result;
    export interface LoggerStream {
        type?: string;
        level?: number | string;
        path?: string;
        stream?: NodeJS.WritableStream | LoggerStream;
        closeOnExit?: boolean;
    }
    export interface Logger {
        addStream(stream: LoggerStream): void;
        level(value: number | string): void;
        levels(name: number | string, value: number | string): void;
        trace(error: Error, format?: any, ...params: any[]): void;
        trace(buffer: Buffer, format?: any, ...params: any[]): void;
        trace(obj: Object, format?: any, ...params: any[]): void;
        trace(format: string, ...params: any[]): void;
        debug(error: Error, format?: any, ...params: any[]): void;
        debug(buffer: Buffer, format?: any, ...params: any[]): void;
        debug(obj: Object, format?: any, ...params: any[]): void;
        debug(format: string, ...params: any[]): void;
        info(error: Error, format?: any, ...params: any[]): void;
        info(buffer: Buffer, format?: any, ...params: any[]): void;
        info(obj: Object, format?: any, ...params: any[]): void;
        info(format: string, ...params: any[]): void;
        warn(error: Error, format?: any, ...params: any[]): void;
        warn(buffer: Buffer, format?: any, ...params: any[]): void;
        warn(obj: Object, format?: any, ...params: any[]): void;
        warn(format: string, ...params: any[]): void;
        error(error: Error, format?: any, ...params: any[]): void;
        error(buffer: Buffer, format?: any, ...params: any[]): void;
        error(obj: Object, format?: any, ...params: any[]): void;
        error(format: string, ...params: any[]): void;
        fatal(error: Error, format?: any, ...params: any[]): void;
        fatal(buffer: Buffer, format?: any, ...params: any[]): void;
        fatal(obj: Object, format?: any, ...params: any[]): void;
        fatal(format: string, ...params: any[]): void;
    }
}

declare module 'ninejs/modules/serverBoot' {
    import { PromiseType } from 'ninejs/core/deferredUtils';
    var _default: PromiseType<{}>;
    export default _default;
}

declare module 'ninejs/modules/webserver' {
    export import ClientUtils = require('ninejs/modules/webserver/ClientUtils');
    export import Endpoint = require('ninejs/modules/webserver/Endpoint');
    export import NineplateResource = require('ninejs/modules/webserver/NineplateResource');
    export import SinglePage = require('ninejs/modules/webserver/SinglePage');
    export import StaticResource = require('ninejs/modules/webserver/StaticResource');
    export import WebServer = require('ninejs/modules/webserver/WebServer');
    export import module = require('ninejs/modules/webserver/module');
}

declare module 'ninejs/core/ext/Properties' {
    export default class Properties {
        [name: string]: any;
        get(name: string): any;
        set(name: any, ...values: any[]): any;
        watch(name: string, action: (name: string, oldValue: any, newValue: any) => void): WatchHandle;
        mixinProperties(target: any): this;
        mixinRecursive(target: any): this;
        $njsWatch: {
            [name: string]: {
                action: (name: string, oldValue: any, newValue: any) => void;
                remove: () => void;
            }[];
        };
        $njsConstructors: ((args: any) => void)[];
        constructor(...argslist: any[]);
        static mixin(target: any): (args: any) => void;
    }
    export interface EventedArray extends Array<any> {
        new (arr: any[]): EventedArray;
    }
    export interface WatchHandle {
        new (action: (name: string, oldValue: any, newValue: any) => void, watchList: WatchHandle[]): WatchHandle;
        pause: () => void;
        resume: () => void;
        remove: () => void;
        id: number;
        action: (name: string, oldValue: any, newValue: any) => void;
        watchList: WatchHandle[];
    }
}

declare module 'ninejs/ui/Skin' {
    import Properties from 'ninejs/core/ext/Properties';
    import { ResultFunction } from 'ninejs/nineplate';
    import * as def from 'ninejs/core/deferredUtils';
    import { StyleType } from 'ninejs/css';
    class Skin extends Properties {
        cssList: StyleType[];
        template: ResultFunction;
        enabled: boolean;
        applies(): boolean;
        templateSetter(value: any): void;
        enable(widget: {
            domNode: any;
            mixinProperties: (obj: any) => void;
        }): def.PromiseType<{}>;
        disable(): void;
        updated(control: any): void;
    }
    export default Skin;
}

declare module 'ninejs/ui/Skins' {
    export import Editor = require('ninejs/ui/Skins/Editor');
    export import Wizard = require('ninejs/ui/Skins/Wizard');
}

declare module 'ninejs/ui/Widget' {
    import Properties from 'ninejs/core/ext/Properties';
    import { EventHandler, RemovableType } from 'ninejs/core/on';
    import { PromiseType, PromiseConstructorType } from 'ninejs/core/deferredUtils';
    import Skin from 'ninejs/ui/Skin';
    class Widget extends Properties {
        $njsWidget: boolean;
        $njsChildWidgets: Widget[];
        $njsCollect: {
            [name: string]: ((data: any) => any)[];
        };
        $njsEventListenerHandlers: RemovableType[];
        $njsEventListeners: {
            [name: string]: EventHandler[];
        };
        $njsShowDefer: PromiseConstructorType<HTMLElement>;
        currentSkin: Skin;
        waiting: boolean;
        domNode: HTMLElement | PromiseType<HTMLElement>;
        skin: any;
        skinContract: {
            [name: string]: {
                type: string;
            };
        };
        waitNode: HTMLElement;
        waitSkin: any;
        static extend(...args: any[]): any;
        destroy(): void;
        registerChildWidget(w: Widget): void;
        remove(): boolean;
        skinSetter(value: Skin | PromiseType<Skin> | string): PromiseType<Skin>;
        classSetter(v: string): PromiseType<HTMLElement>;
        idSetter(v: string): PromiseType<HTMLElement>;
        styleSetter(v: string): PromiseType<HTMLElement>;
        updateSkin(): PromiseType<void>;
        onUpdatedSkin(): void;
        forceUpdateSkin(): void;
        loadSkin(name: string): PromiseType<Skin>;
        own(...args: RemovableType[]): void;
        show(parentNode?: HTMLElement | string): PromiseType<HTMLElement>;
        on(type: string, action: (e?: any) => any, persistEvent?: boolean): RemovableType;
        emit(type: string, data: any): void;
        subscribe(type: string, action: (data: any) => any): void;
        collect(type: string, data: any): any[];
        wait(_defer: PromiseType<any>): PromiseType<void>;
        constructor(args: any);
    }
    export default Widget;
    export interface WidgetConstructor {
        new (args: any): Widget;
    }
}

declare module 'ninejs/ui/bootstrap' {
    export import bootstrap = require('ninejs/ui/bootstrap/bootstrap');
}

declare module 'ninejs/ui/utils' {
    export import append = require('ninejs/ui/utils/append');
    export import domUtils = require('ninejs/ui/utils/domUtils');
    export import setClass = require('ninejs/ui/utils/setClass');
    export import setText = require('ninejs/ui/utils/setText');
}

declare module 'ninejs/_nineplate/utils/node/xmlParser' {
    export class XmlParserError extends Error {
        line: number;
        column: number;
        xml: string;
    }
    export interface InternalNode {
        nodeType: number;
        prefix?: string;
        name?: string;
        nodeName?: string;
        localName?: string;
        parentNode?: InternalNode;
        namespaces?: string[];
        namespaceURI?: string;
        namespaceUri?: string;
        nodeValue?: any;
        value?: any;
        children?: InternalNode[];
        childNodes?: InternalNode[];
        attributes?: InternalNode[];
        [name: string]: any;
    }
    export function parse(text: string, sync: boolean): any;
}

declare module 'ninejs/_nineplate/renderers/JavascriptRenderer' {
    export class VarContext {
        varNameFilter: (n: string) => string;
        getNewVariable: () => string;
        addVar: (name: string, value: any) => void;
        addGlobal: (name: string) => void;
        getVariables: () => string[];
        getParameters: () => string[];
        addParameter: (name: string) => void;
        constructor(parentContext?: VarContext, debugMode?: boolean);
    }
    export class Expression {
        append: (t: any) => Expression;
        parenthesis: () => Expression;
        noParenthesis: () => Expression;
        op: (operator: string, expr: any) => Expression;
        equals: (expr: any) => Expression;
        notEquals: (expr: any) => Expression;
        or: (expr: any) => Expression;
        and: (expr: any) => Expression;
        iif: (trueExpr: any, falseExpr: any) => Expression;
        lessThan: (expr: any) => Expression;
        plus: (expr: any) => Expression;
        minus: (expr: any) => Expression;
        member: (name: any) => Expression;
        element: (expr: any) => Expression;
        invoke: (...args: any[]) => Expression;
        render: () => string;
        toString: () => string;
        constructor(expr: any, parenthesis: boolean, renderer: JavascriptRenderer);
    }
    export class Chunk {
        renderer: JavascriptRenderer;
        clear: () => void;
        render: () => string;
        constructor(parent: JavascriptRenderer);
    }
    export class Condition {
        renderer: JavascriptRenderer;
        elseIf: (expr: any) => JavascriptRenderer;
        elseDo: () => JavascriptRenderer;
        render: () => string;
        constructor(expr: any, parent: JavascriptRenderer);
    }
    export class ForLoop {
        renderer: JavascriptRenderer;
        render: () => string;
        constructor(init: any, cond: any, iter: any, parent: JavascriptRenderer);
    }
    export class ForIn {
        renderer: JavascriptRenderer;
        render: () => string;
        constructor(propName: string, expr: any, parent: JavascriptRenderer);
    }
    export class JsArray {
        add: (expr: any) => JsArray;
        render: () => string;
        toString: () => string;
        constructor(init?: any[]);
    }
    export class JavascriptRenderer {
        addAssignment: (vName: any, expr: any) => JavascriptRenderer;
        addCondition: (expr: any) => Condition;
        addDebugger: () => JavascriptRenderer;
        addFor: (init: any, cond: any, iter: any) => JavascriptRenderer;
        addForIn: (propName: any, expr: any) => JavascriptRenderer;
        addGlobal: (name: string) => JavascriptRenderer;
        addParameter: (name: string) => JavascriptRenderer;
        addReturn: (expr: any) => JavascriptRenderer;
        addStatement: (stmt: any) => JavascriptRenderer;
        addStatementAtBeginning: (stmt: any) => JavascriptRenderer;
        addVar: (name: string, value?: any) => JavascriptRenderer;
        append: (stmt: any) => JavascriptRenderer;
        array: (init: any[]) => JsArray;
        chunk: () => Chunk;
        clear: () => JavascriptRenderer;
        comment: (msg: string, prepend?: boolean) => void;
        context: VarContext;
        convertToFunctionCall: (parameters: string[]) => string;
        createObject: (expr: any) => Expression;
        debugMode: boolean;
        expression: (expr: any) => Expression;
        getFunction: () => Function;
        getIndent: () => string;
        getNewVariable: () => string;
        getParentRenderer: () => JavascriptRenderer;
        indent: number;
        init: () => JavascriptRenderer;
        innerFunction: (name: string) => JavascriptRenderer;
        literal: (expr: any) => string;
        lineSeparator: string;
        newAssignment: (vName: string, expr: any) => Expression;
        newFunction: (pars: any[]) => JavascriptRenderer;
        not: (expr: any) => string;
        renderBody: () => string;
        renderFunction: () => string;
        raw: (expr: any) => Expression;
        render: () => string;
        toString: () => string;
        varName: (n: string) => string;
        constructor(debugMode?: boolean, context?: VarContext, parentContext?: VarContext, indent?: number, parentRenderer?: JavascriptRenderer);
    }
}

declare module 'ninejs/_nineplate/utils/functions' {
    export var t: (e: HTMLElement, text: string, doc: HTMLDocument) => Node;
    export var tst: () => (position: string, insertedElement: Element) => Element;
    export var ae: (e: HTMLElement, name: string, doc: HTMLDocument) => HTMLElement;
    export var aens: (e: HTMLElement, name: string, ns: string, doc: HTMLDocument) => Element;
    export var e: (e: HTMLElement, name: string, doc: HTMLDocument) => HTMLElement;
    export var ens: (e: HTMLElement, name: string, ns: string, doc: HTMLDocument) => Element;
}

declare module 'ninejs/_nineplate/utils/node' {
    export import nodeXml = require('ninejs/_nineplate/utils/node/node-xml');
    export import text = require('ninejs/_nineplate/utils/node/text');
    export import xmlParser = require('ninejs/_nineplate/utils/node/xmlParser');
}

declare module 'ninejs/core/ext/Evented' {
    import { RemovableType } from 'ninejs/core/on';
    var result: {
        on(type: string, listener: (e?: any) => any): RemovableType;
        emit(...arglist: any[]): any;
    };
    export default result;
}

declare module 'ninejs/core/ext/_common' {
    export interface PropertiesInstance {
        get: (name: string) => any;
        set: (name: string, val: any) => any;
        watch: (propertyName: string, action: ((propertyName: string, oldValue: any, newValue: any) => void)) => void;
        mixinProperties: (target: any) => void;
        mixinRecursive: (target: any) => void;
        $njsWatch: {
            [name: string]: any[];
        };
    }
    export interface Properties {
        new (m: any): PropertiesInstance;
        mixin: (target: any) => ((target: any) => void);
    }
}

declare module 'ninejs/core/logic/Expression' {
    import Properties from 'ninejs/core/ext/Properties';
    export interface Operator {
        name: string;
        operator?: (a: any, b: any) => boolean;
        reductor?: (a: any, b: any) => boolean;
        dataTypeList?: string[];
    }
    export interface Summary {
        name: string;
        dataTypeList: (item: any) => boolean;
        action?: (data: any) => any;
        postAction?: (values: any[], side: string, fn: (val: any) => boolean) => boolean;
    }
    export interface RecordContext {
        name: string;
        value: any;
    }
    class Expression extends Properties {
        constructor(args: any);
        operator: string;
        operatorList: {
            [name: string]: Operator;
        };
        summaryList: {
            [name: string]: Summary;
        };
        isNegative: boolean;
        source: any;
        sourceSummary: string;
        target: any;
        targetSummary: string;
        expressionList: Expression[];
        where: Expression;
        ambiguous: boolean;
        _formatValue(val: any, isVariable?: boolean): any;
        sourceValueGetter(): any;
        targetValueGetter(): any;
        toString(): any;
        _buildGetterFunction(src: string): (data: any, recordContextStack: RecordContext[], where: Expression) => any;
        sourceFieldSetter(src: string): void;
        targetFieldSetter(src: string): void;
        ambiguousSetter(val: boolean): void;
        filter(arr: any[], recordContextStack?: RecordContext[]): any[];
        evaluate(data: any, recordContextStack?: RecordContext[]): boolean;
        involvedSourcesGetter(): string[];
        reset(): void;
        clone(): Expression;
        toJson(): any;
        fromJson(data: any): void;
        hasSource(): boolean;
        hasTarget(): boolean;
        isValid(): boolean;
    }
    export default Expression;
}

declare module 'ninejs/modules/client/FullScreenFrame' {
    import Widget from 'ninejs/ui/Widget';
    import { PromiseType } from 'ninejs/core/deferredUtils';
    class FullScreenFrame extends Widget {
        init: PromiseType<HTMLElement>;
        containerNode: HTMLElement;
        selectedSetter(idx: any): void;
        addChild(child: any): any;
    }
    export default FullScreenFrame;
}

declare module 'ninejs/modules/client/Skin' {
    export import FullScreenFrame = require('ninejs/modules/client/Skin/FullScreenFrame');
}

declare module 'ninejs/modules/client/container' {
    import Module from 'ninejs/modules/Module';
    var result: Module;
    export default result;
}

declare module 'ninejs/modules/client/router' {
    import Module from 'ninejs/modules/Module';
    var result: Module;
    export default result;
}

declare module 'ninejs/modules/client/singlePageContainer' {
    import Module from 'ninejs/modules/Module';
    var _default: Module;
    export default _default;
}

declare module 'ninejs/modules/webserver/ClientUtils' {
    import Properties from 'ninejs/core/ext/Properties';
    import WebServer from 'ninejs/modules/webserver/WebServer';
    import StaticResource from 'ninejs/modules/webserver/StaticResource';
    import { Logger } from 'ninejs/modules/ninejs-server';
    import { Request, Response } from 'ninejs/modules/webserver/WebServer';
    export class CacheManifest extends Properties {
        baseUrl: string;
        defaultCreationDate: Date;
        networkResources: string[];
        cacheResources: string[];
        offlineResources: string[];
        config: any;
        cacheEndpoint: StaticResource;
        addToCache(collection: string[], url: string, prefix: string, filter: (url: string) => boolean): void;
        cache(url: string, prefix?: string, filter?: (url: string) => boolean): void;
        network(url: string, prefix: string, filter: (url: string) => boolean): void;
        handler(req: Request, res: Response): void;
        constructor(args: any);
    }
    export class Utils {
        webServer: WebServer;
        appCache: CacheManifest;
        requireJsConfigEndpoint: StaticResource;
        cacheEndpoint: StaticResource;
        amdPaths: {
            [name: string]: string;
        };
        aliases: string[][];
        boot: string[];
        modules: {
            [name: string]: string;
        };
        units: {
            [name: string]: any;
        };
        postActions: string[];
        has: {
            [name: string]: any;
        };
        logger: {
            [name: string]: Logger;
        };
        init(webServer: WebServer): void;
        addAmdPath(prefix: string, path: string): void;
        addAmdAlias(moduleName: string, alias: string): void;
        addBoot(target: string): void;
        addModule(name: string, target: string): void;
        getUnit(name: string): any;
        addPostAction(action: string): void;
        requireJsConfigHandler(req: Request, res: Response): void;
        constructor();
    }
    export default Utils;
}

declare module 'ninejs/modules/webserver/Endpoint' {
    import Properties from 'ninejs/core/ext/Properties';
    import WebServer from 'ninejs/modules/webserver/WebServer';
    import { Request, Response, Application } from 'ninejs/modules/webserver/WebServer';
    class Endpoint extends Properties {
        type: string;
        method: string;
        children: Endpoint[];
        app: Application;
        server: WebServer;
        route: string;
        order: number;
        validate: (req: Request, res: Response) => any;
        handleAs: string;
        parserOptions: any;
        on(eventType: string, callback: (ev: any) => void): any;
        emit(eventType: string, data: any): any;
        handler(req: Request, res: Response): void;
        constructor(args: any);
    }
    export { Endpoint };
    export default Endpoint;
}

declare module 'ninejs/modules/webserver/NineplateResource' {
    import StaticResource from 'ninejs/modules/webserver/StaticResource';
    import { Request, Response } from 'ninejs/modules/webserver/WebServer';
    class NineplateResource extends StaticResource {
        type: string;
        contentType: string;
        doctype: string;
        context: any;
        handler(req: Request, res: Response): void;
        constructor(arg: any);
    }
    export default NineplateResource;
}

declare module 'ninejs/modules/webserver/SinglePage' {
    export import SinglePageContainer = require('ninejs/modules/webserver/SinglePage/SinglePageContainer');
}

declare module 'ninejs/modules/webserver/StaticResource' {
    import { Endpoint } from 'ninejs/modules/webserver/Endpoint';
    import { Request, Response } from 'ninejs/modules/webserver/WebServer';
    class NonCachedStaticResource extends Endpoint {
        contentType: string;
        content: any;
        props: any;
        path: string;
        options: any;
        action: (req: Request, res: Response) => void;
        handler(req: Request, res: Response): void;
        constructor(args: any);
    }
    class StaticResource extends NonCachedStaticResource {
        maxAge: number;
        cacheType: string;
        lastModifiedSince: Date;
        etag: string;
        path: string;
        applyETag(res: Response, content: string): void;
        mustRevalidate(req: Request, res: Response): boolean;
        handler(req: Request, res: Response): void;
        constructor(args: any);
    }
    export { NonCachedStaticResource, StaticResource };
    export default StaticResource;
}

declare module 'ninejs/modules/webserver/WebServer' {
    import Properties from 'ninejs/core/ext/Properties';
    import Endpoint from 'ninejs/modules/webserver/Endpoint';
    import StaticResource from 'ninejs/modules/webserver/StaticResource';
    import NineplateResource from 'ninejs/modules/webserver/NineplateResource';
    import SinglePageContainer from 'ninejs/modules/webserver/SinglePage/SinglePageContainer';
    import ClientUtils from 'ninejs/modules/webserver/ClientUtils';
    import { Logger } from 'ninejs/modules/ninejs-server';
    import http = require('http');
    class WebServer extends Properties {
        Endpoint: {
            new (args: any): Endpoint;
        };
        StaticResource: {
            new (args: any): StaticResource;
        };
        NineplateResource: {
            new (args: any): NineplateResource;
        };
        SinglePageContainer: {
            new (args: any): SinglePageContainer;
        };
        logger: {
            [name: string]: Logger;
        };
        app: Application;
        config: any;
        baseUrl: string;
        jsUrl: string;
        port: number;
        ip: string;
        phases: {
            static: StaticResource[];
            utils: Endpoint[];
            auth: Endpoint[];
            endpoint: Endpoint[];
            [name: string]: Endpoint[];
        };
        clientUtils: ClientUtils;
        init(config: any): void;
        build(): void;
        add(resource: Endpoint, prefix?: string): void;
        postCreate(): void;
        clientSetup(action: (utils: ClientUtils) => void): void;
        constructor(args: any);
    }
    export default WebServer;
    export interface Request extends http.ServerRequest {
        get(name: string): string;
        header(name: string): string;
        headers: {
            [key: string]: string;
        };
        accepts(type: string): string;
        accepts(type: string[]): string;
        param(name: string, defaultValue?: any): string;
        is(type: string): boolean;
        protocol: string;
        secure: boolean;
        ip: string;
        ips: string[];
        hostname: string;
        xhr: boolean;
        body: any;
        cookies: any;
        method: string;
        params: any;
        user: any;
        authenticatedUser: any;
        clearCookie(name: string, options?: any): Response;
        query: any;
        route: any;
        signedCookies: any;
        originalUrl: string;
        url: string;
    }
    export interface Send {
        (status: number, body?: any): Response;
        (body: any): Response;
    }
    export interface CookieOptions {
        maxAge?: number;
        signed?: boolean;
        expires?: Date;
        httpOnly?: boolean;
        path?: string;
        domain?: string;
        secure?: boolean;
    }
    export interface Response extends http.ServerResponse {
        status: (code: number) => Response;
        sendStatus: (code: number) => Response;
        getHeader: (name: string) => string;
        send: Send;
        json: Send;
        jsonp: Send;
        sendFile(path: string): void;
        sendFile(path: string, options: any): void;
        sendFile(path: string, fn: (err: Error) => void): void;
        sendFile(path: string, options: any, fn: (err: Error) => void): void;
        download(path: string): void;
        download(path: string, filename: string, fn: (err: Error) => void): void;
        contentType(type: string): Response;
        type(type: string): Response;
        format(obj: any): Response;
        attachment(filename?: string): Response;
        set(field: any): Response;
        set(field: string, value?: string): Response;
        header(field: any): Response;
        header(field: string, value?: string): Response;
        headersSent: boolean;
        get(field: string): string;
        clearCookie(name: string, options?: any): Response;
        cookie(name: string, val: string, options: CookieOptions): Response;
        cookie(name: string, val: any, options: CookieOptions): Response;
        cookie(name: string, val: any): Response;
        redirect(url: string): void;
        redirect(status: number, url: string): void;
        redirect(url: string, status: number): void;
        render(view: string, options?: Object, callback?: (err: Error, html: string) => void): void;
        render(view: string, callback?: (err: Error, html: string) => void): void;
        locals: any;
        charset: string;
    }
    export interface Application {
        listen: (port: number, ip?: string) => void;
        engine: (name: string, callback: (path: string, options: any, callback: (err: any, val: any) => void) => void) => void;
        enable: (name: string) => void;
        render(name: string, options?: Object, callback?: (err: Error, html: string) => void): void;
        render(name: string, callback: (err: Error, html: string) => void): void;
    }
}

declare module 'ninejs/modules/webserver/module' {
    import Module from 'ninejs/modules/Module';
    var result: Module;
    export default result;
}

declare module 'ninejs/ui/Skins/Editor' {
    export import Default = require('ninejs/ui/Skins/Editor/Default');
}

declare module 'ninejs/ui/Skins/Wizard' {
    export import Default = require('ninejs/ui/Skins/Wizard/Default');
}

declare module 'ninejs/ui/bootstrap/bootstrap' {
    import { StyleInstance } from 'ninejs/css';
    export class BootstrapProto {
        map: {
            [name: string]: string;
        };
        enable(...args: string[]): void;
        disable(...args: string[]): void;
        bootstrapCss: StyleInstance;
        enableCss(val: boolean): void;
        commonCss: StyleInstance;
        enableCommonCss(val: boolean): void;
        verticalResponsiveDeviceCss: StyleInstance;
        enableVResponsiveDevice(val: boolean): void;
        verticalResponsiveCss: StyleInstance;
        enableVResponsiveViewPort(val: boolean): void;
        gridMaxCss: StyleInstance;
        enableGridMax(val: boolean): void;
        constructor();
    }
    var bootstrap: BootstrapProto;
    export default bootstrap;
}

declare module 'ninejs/ui/utils/append' {
    var append: {
        (parentNode: HTMLElement, node: any, position?: string): HTMLElement;
        create: (node: string) => HTMLElement;
        remove: (node: HTMLElement) => void;
        toIndex: (parentNode: HTMLElement, node: HTMLElement, index: number) => HTMLElement;
    };
    export var toIndex: (parentNode: HTMLElement, node: HTMLElement, index: number) => HTMLElement;
    export var remove: (node: HTMLElement) => void;
    export var create: (node: string) => HTMLElement;
    export default append;
}

declare module 'ninejs/ui/utils/domUtils' {
    import _setClass from 'ninejs/ui/utils/setClass';
    import _setText from 'ninejs/ui/utils/setText';
    import _append from 'ninejs/ui/utils/append';
    export function isHidden(control: any): boolean;
    export function isShown(control: any): boolean;
    export function hide(control: any): void;
    export function show(control: any, showAttr: string): void;
    export function empty(node: HTMLElement): void;
    export function enableHovering(control: any, enter: (e: Event) => void, leave: (e: Event) => void, options: {
        pausable: boolean;
    }): any;
    export var setText: typeof _setText;
    export var setClass: typeof _setClass;
    export var append: typeof _append;
}

declare module 'ninejs/ui/utils/setClass' {
    var setClass: {
        (node: HTMLElement, ...clist: string[]): HTMLElement;
        has: (node: HTMLElement, ...clist: string[]) => boolean;
        temporary: (node: HTMLElement, delay: number, ...clist: string[]) => number;
    };
    export default setClass;
}

declare module 'ninejs/ui/utils/setText' {
    var setText: {
        (node: HTMLElement, text: string): HTMLElement;
        emptyNode: (node: HTMLElement) => void;
    };
    export default setText;
}

declare module 'ninejs/_nineplate/utils/node/node-xml' {
    export var SaxParser: any;
}

declare module 'ninejs/_nineplate/utils/node/text' {
    export function load(name: string, req: any, onLoad: Function): void;
}

declare module 'ninejs/modules/client/Skin/FullScreenFrame' {
    import Skin from 'ninejs/ui/Skin';
    var _default: Skin;
    export default _default;
}

declare module 'ninejs/modules/webserver/SinglePage/SinglePageContainer' {
    import NineplateResource from 'ninejs/modules/webserver/NineplateResource';
    import { Request, Response } from 'ninejs/modules/webserver/WebServer';
    export default class SinglePageContainer extends NineplateResource {
        context: any;
        handler(req: Request, res: Response): void;
        constructor(arg: any);
    }
}

declare module 'ninejs/ui/Skins/Editor/Default' {
    import Skin from 'ninejs/ui/Skin';
    var _default: Skin;
    export default _default;
}

declare module 'ninejs/ui/Skins/Wizard/Default' {
    import Skin from 'ninejs/ui/Skin';
    var _default: Skin;
    export default _default;
}

